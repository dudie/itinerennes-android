package fr.itinerennes.ui.activity;

import java.io.IOException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.Adapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.SimpleCursorAdapter.ViewBinder;
import android.widget.TextView;

import fr.itinerennes.R;
import fr.itinerennes.database.Columns.MarkersColumns;
import fr.itinerennes.database.Columns.NominatimColumns;
import fr.itinerennes.nominatim.model.Address;
import fr.itinerennes.ui.adapter.WrapperAdapter;
import fr.itinerennes.utils.NominatimTranslator;
import fr.itinerennes.utils.ResourceResolver;

/**
 * Displays search results.
 * 
 * @author Jérémie Huchet
 */
public final class SearchResultsActivity extends ItineRennesActivity {

    /** The event logger. */
    private static final Logger LOGGER = LoggerFactory.getLogger(SearchResultsActivity.class);

    /**
     * Initialized in {@link #onCreate(Bundle)}, a reference to the list view displaying search
     * results.
     */
    private ListView resultsList;

    /**
     * Initialized in {@link #onCreate(Bundle)}, a reference to the view displaying "no search
     * results".
     */
    private View noResultsView;

    /**
     * Initialized in {@link #onCreate(Bundle)}, a reference to the textview displaying "no search
     * results for query '%s'".
     */
    private TextView noResultsLabel;

    /**
     * {@inheritDoc}
     * 
     * @see android.app.Activity#onCreate(android.os.Bundle)
     */
    @Override
    protected void onCreate(final Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.act_search_results);

        resultsList = (ListView) findViewById(R.id.search_results_list);
        noResultsView = findViewById(R.id.search_results_none);
        noResultsLabel = (TextView) noResultsView.findViewById(R.id.search_results_no_results);

        onNewIntent(getIntent());
    }

    /**
     * Refreshes the search results list view.
     * <p>
     * {@inheritDoc}
     * 
     * @see android.app.Activity#onNewIntent(android.content.Intent)
     */
    @Override
    protected void onNewIntent(final Intent intent) {

        super.onNewIntent(intent);
        final String query = intent.getStringExtra(SearchManager.QUERY);

        // search for markers
        final Cursor cMarkers = getApplicationContext().getMarkerDao().searchMarkers(query);

        // prepare a view binder used to bind views generated by listview adapters
        final ViewBinder viewBinder = new SearchResultsListItemViewBinder(this);

        // prepare adapter to show marker results
        String[] from = new String[] { MarkersColumns.TYPE, MarkersColumns.LABEL };
        int[] to = new int[] { R.id.search_result_marker_icon, R.id.search_result_marker_label };
        final SimpleCursorAdapter markersAdapter = new SimpleCursorAdapter(this,
                R.layout.li_search_result_marker, cMarkers, from, to);
        markersAdapter.setViewBinder(viewBinder);

        // prepare adapter to show nominatim results, it is initially empty
        from = new String[] { NominatimColumns.DISPLAY_NAME };
        to = new int[] { R.id.search_result_nominatim_label };
        final SimpleCursorAdapter nominatimAdapter = new SimpleCursorAdapter(this,
                R.layout.li_search_result_nominatim, NominatimTranslator.emptyCursor(), from, to);
        nominatimAdapter.setViewBinder(viewBinder);

        // wrap the marker and the nominatim adapters and set them to the list view
        final WrapperAdapter wrapper = new WrapperAdapter(this, new Adapter[] { markersAdapter,
                nominatimAdapter });
        wrapper.setLoading(nominatimAdapter, true);

        resultsList.setAdapter(wrapper);

        // search for the nominatim results in background
        new AsyncTask<Void, Void, Cursor>() {

            @Override
            protected Cursor doInBackground(final Void... params) {

                Cursor c = null;
                try {
                    final List<Address> results = getApplicationContext().getNominatimClient()
                            .search(String.valueOf(query));
                    c = NominatimTranslator.toCursor(results);
                } catch (final IOException e) {
                    // TJHU Handle Nominatim IO exception
                    getApplicationContext().getExceptionHandler().handleException(e);
                }
                if (null == c) {
                    c = NominatimTranslator.emptyCursor();
                }

                return c;
            }

            @Override
            protected void onPostExecute(final Cursor result) {

                wrapper.setLoading(nominatimAdapter, false);
                nominatimAdapter.changeCursor(result);

                if (markersAdapter.isEmpty() && nominatimAdapter.isEmpty()) {
                    resultsList.setVisibility(View.GONE);
                    noResultsView.setVisibility(View.VISIBLE);
                    noResultsLabel.setText(getString(R.string.no_results, query));
                } else {
                    resultsList.setVisibility(View.VISIBLE);
                    noResultsView.setVisibility(View.GONE);
                }
            }
        }.execute((Void) null);
    }

    /**
     * Utility to bind views for the search result list view.
     * 
     * @author Jérémie Huchet
     */
    private static class SearchResultsListItemViewBinder implements ViewBinder {

        /** The context. */
        private final Context context;

        /**
         * Creates the view binder.
         * 
         * @param context
         *            the context
         */
        public SearchResultsListItemViewBinder(final Context context) {

            this.context = context;
        }

        /**
         * {@inheritDoc}
         * 
         * @see android.widget.SimpleCursorAdapter.ViewBinder#setViewValue(android.view.View,
         *      android.database.Cursor, int)
         */
        @Override
        public boolean setViewValue(final View view, final Cursor cursor, final int columnIndex) {

            boolean handled = false;

            if (R.id.search_result_marker_icon == view.getId()) {
                // want to bind the marker icon view
                final String type = cursor.getString(columnIndex);
                final int resId = ResourceResolver.getDrawableId(context,
                        String.format("ic_activity_title_%s", type), 0);
                ((ImageView) view).setImageResource(resId);
                handled = true;
            }
            return handled;
        }
    }
}
