package fr.itinerennes.ui.adapter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import android.database.DataSetObserver;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.BaseAdapter;

/**
 * An adapter to wrap other adapters and displays multiple.
 * 
 * @author Jérémie Huchet
 */
public final class WrapperAdapter extends BaseAdapter {

    /** The event logger. */
    private static final Logger LOGGER = LoggerFactory.getLogger(WrapperAdapter.class);

    /** The wrapped adapters. */
    private final Adapter[] adapters;

    /**
     * Creates a wrapper adapter.
     * 
     * @param adapters
     *            the adapters to wrap
     */
    public WrapperAdapter(final Adapter[] adapters) {

        this.adapters = adapters;
        for (final Adapter a : this.adapters) {
            a.registerDataSetObserver(new WrappedAdapterDataSetObserver());
        }
    }

    /**
     * Observes wrapped datasets and dispatch events to the view.
     * 
     * @author Jérémie Huchet
     */
    private final class WrappedAdapterDataSetObserver extends DataSetObserver {

        @Override
        public void onChanged() {

            notifyDataSetChanged();
        }

        @Override
        public void onInvalidated() {

            notifyDataSetInvalidated();
        }
    }

    /**
     * Gets the total count of items adapted by all the wrapped adapters.
     * 
     * @return the item count
     * @see android.widget.Adapter#getCount()
     */
    @Override
    public int getCount() {

        int count = 0;
        for (final Adapter a : adapters) {
            count += a.getCount();
        }
        return count;
    }

    /**
     * {@inheritDoc}
     * 
     * @see android.widget.Adapter#getItem(int)
     */
    @Override
    public Object getItem(final int position) {

        Object item = null;

        int minPosition = 0;
        int maxPosition = 0;

        for (int i = 0; item == null && i < adapters.length; i++) {

            minPosition += maxPosition;
            maxPosition += adapters[i].getCount();

            if (position <= maxPosition) {
                item = adapters[i].getItem(position - minPosition);
            }
        }
        return item;
    }

    /**
     * {@inheritDoc}
     * 
     * @see android.widget.Adapter#getItemId(int)
     */
    @Override
    public long getItemId(final int position) {

        return position;
    }

    /**
     * {@inheritDoc}
     * 
     * @see android.widget.BaseAdapter#getViewTypeCount()
     */
    @Override
    public int getViewTypeCount() {

        return adapters.length;
    }

    /**
     * {@inheritDoc}
     * 
     * @see android.widget.Adapter#getView(int, android.view.View, android.view.ViewGroup)
     */
    @Override
    public View getView(final int position, final View convertView, final ViewGroup parent) {

        View view = null;

        int minPosition = 0;
        int maxPosition = 0;

        for (int i = 0; view == null && i < adapters.length; i++) {

            minPosition += maxPosition;
            maxPosition += adapters[i].getCount();

            if (adapters[i].getCount() > 0 && position < maxPosition) {
                // convertView may be a view generated by any of the adapters wrapped by this class,
                // if underlying adapters tries to reuse it, they may fail because they don't find
                // the subview they expected
                // then if an error occurs, we retry without the convertView
                // try {
                // view = adapters[i].getView(position - minPosition, convertView, parent);
                // } catch (final Throwable e) {
                view = adapters[i].getView(position - minPosition, null, parent);
                // }
            }
        }

        return view;
    }
}
